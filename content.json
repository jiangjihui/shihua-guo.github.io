{"meta":{"title":"Alan","subtitle":null,"description":"alan's blog","author":"Alan","url":"http://haojen.github.io"},"pages":[{"title":"Tags","date":"2017-09-24T01:39:44.000Z","updated":"2017-09-24T01:40:16.840Z","comments":true,"path":"Tags/index.html","permalink":"http://haojen.github.io/Tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用nexus建立个人npm库","slug":"nexus","date":"2017-11-13T15:05:04.000Z","updated":"2017-11-23T15:05:04.520Z","comments":true,"path":"2017/11/13/nexus/","link":"","permalink":"http://haojen.github.io/2017/11/13/nexus/","excerpt":"","text":"下面分享一下如何使用nexus建立自己的npm仓库 准备工作 java环境 node环境 nexus安装包 3.6.0 运行nexus 进入解压后nexus的bin文件夹，在此目录打开cmd （使用gitbash执行可能会有问题）。执行nexus /run 默认端口为：8081，打开可以看到nexus界面了。 点击右上角可以登录，默认账号密码：admin admin123 “箱子”图标就是代表着仓库中的包，”齿轮”图标则为设置，下面我们进入设置 之后，我们将关注“Repository”和“Security”栏目。分别用于创建/管理仓库和用户 创建npm需要的Blob存储（此步骤可以忽略） 分别创建name为”npm-proxy”,”npm-hosted”,”npm-group”的存储（分别用于存放npm代理下载的依赖包、发布的私有依赖包、代理下载的和私有的组合的依赖包）。 创建npm仓库 点击“Create Repository” nexus增加了许多仓库类型，下面我们只关注和npm相关的 下面说下这几种类型的区别 hosted 为私有的仓库，我们在本地写好的npm插件就是发布到这个地方的。这个就是我们搭建私有仓库的目的。 proxy 为代理的镜像地址（我们一般设置为淘宝镜像即可），大概可以理解为，nexus帮我们从这个地址下载其他的npm依赖包。而且会自动缓存到nexus仓库。 group 用于私有仓库和代理仓库的组合。就是我们可以从group下载到私有的依赖（存放在nexus仓库的）和npm官网的依赖。 需要注意的是，hosted仅用于发布你的私有依赖，所以，如果你从hosted下载依赖是无法下载的。下载只能通过group下载。 下面开始建立仓库 创建代理仓库（npm-proxy） name为“npm-proxy” remote storage为“https://registry.npm.taobao.org“ 存储为“npm-proxy” 创建私有仓库（npm-hosted） name为“npm-hosted” 存储为“npm-hosted” 创建组个仓库（npm-group） name为“npm-group” 存储为“npm-group” 然后在group中，把前面2个创建的拖到右边框中 以上，仓库已经创建完成。可以通过界面进入仓库，查看刚刚创建的仓库。也可以直接访问，如果出现404，则说明name写错咯。地址和name对应的 http://localhost:8081/repository/npm-proxy/ http://localhost:8081/repository/npm-hosted/ http://localhost:8081/repository/npm-group/ 创建用户 之后我们发布需要这个用户登录 同时把npm Bearer Token Realm置于active 测试下载依赖包 切换npm的registry。可以运行一下命令。记住是npm-group 这个地址。 npm config set registry http://localhost:8081/repository/npm-group/ 同样的，我们也可以打开一下这个文件修改设置 C:\\Users\\你的用户名\\.npmrc 推荐设置（可以解决phantomjs、chromedriver、node-sass无法下载的问题）。直接把一下拷贝进.npmrc文件即可 loglevel=infoscripts-prepend-node-path=trueregistry=http://localhost:8081/repository/npm-group/chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriverphantomjs_cdnurl=http://cnpmjs.org/downloadssass_binary_site=https://npm.taobao.org/mirrors/node-sass/ 设置完之后，我们可以随便下载一个依赖，看是否是经过nexus下载的。 npm install -g generator-vuejs 可以看到的确是走npm-group仓库的。这时候去nexus库查看，可以看到，nexus把从淘宝下载的镜像都缓存在本地了。 测试发布 切换成npm-hosted 的地址 npm config set registry http://localhost:8081/repository/npm-hosted 登录，运行以下命令，然后输入刚刚创建的用户名和密码即可 npm adduser 找一个需要发布的依赖，在根目录运行以下命令，设置registry为npm-hosted，并发布 npm publish 200即为发布成功去nexus仓库可以看到刚刚发布的依赖包","categories":[],"tags":[]},{"title":"用状态驱动应用","slug":"state-of-vue","date":"2017-10-28T15:27:08.000Z","updated":"2017-11-13T15:13:56.295Z","comments":true,"path":"2017/10/28/state-of-vue/","link":"","permalink":"http://haojen.github.io/2017/10/28/state-of-vue/","excerpt":"","text":"状态的必要性 当组件A逐渐变得庞大，需要从组件A中抽取模块变成组件B，或者需要引入更多的组件时，如果通过props来进行组件之间的通信，那么会变得困难，特别是需要依赖更多其他组件的属性时，而且此时，组件间的耦合度会变大，而且对于通信内容都是单向的（通过on可以实现双向，但是比较麻烦）。这时候，组件间的通信都使用状态来管理，那么可以降低耦合度，而且能够响应，并实时更新视图。","categories":[],"tags":[]},{"title":"使用vue开发如何解决跨域以及验证问题","slug":"CROS","date":"2017-09-29T15:29:11.000Z","updated":"2017-11-13T15:09:43.287Z","comments":true,"path":"2017/09/29/CROS/","link":"","permalink":"http://haojen.github.io/2017/09/29/CROS/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Java开发者常用工具","slug":"java-developer-kit","date":"2017-09-23T15:29:44.000Z","updated":"2017-11-13T15:16:53.430Z","comments":true,"path":"2017/09/23/java-developer-kit/","link":"","permalink":"http://haojen.github.io/2017/09/23/java-developer-kit/","excerpt":"","text":"重装系统是一件非常麻烦的事情，特别是继续再次搭建环境，每次需要用到的时候才会想到：“oh！我需要这个工具！”。下面给大家汇总一下一个java程序员所需要的一些工具，以备不时之需： 环境篇 Java环境官网地址，截止2017年9月25日 最新的版本(登录后下载)： jdk-5u22 jdk-6u45 jdk-7u80 jdk-8u144 为了方便使用windows的程序员快速切换各个版本的JDK，JDK6~8的exe都做成了zip并上传到百度云，这个可以直接修改环境变量就可以快速切换了：百度云地址提取密码：shvy Tomcat包含以下版本 tomcat-7.0.82 tomcat-8.5.23 tomcat-9.0.1(beta) 百度云地址提取密码：m3d3","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-09-23T14:50:02.205Z","updated":"2017-09-24T16:16:58.403Z","comments":true,"path":"2017/09/23/hello-world/","link":"","permalink":"http://haojen.github.io/2017/09/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post&lt;html&gt;&lt;/html&gt; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}